local _ = {}
do
	local _s = {
		[1] = { 114, 117, 110, 115, 101, 114, 118, 105, 99, 101 },
		[2] = { 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 115, 101, 114, 118, 105, 99, 101 },
		[3] = { 119, 111, 114, 107, 115, 112, 97, 99, 101 },
		[4] = { 115, 116, 97, 116, 115 },
		[5] = { 108, 105, 103, 104, 116, 105, 110, 103 },
		[6] = { 99, 111, 110, 116, 101, 110, 116, 112, 114, 111, 118, 105, 100, 101, 114 },
		[7] = { 117, 115, 101, 114, 103, 97, 109, 101, 115, 101, 116, 116, 105, 110, 103, 115 },
		[8] = { 114, 101, 110, 100, 101, 114 },
		[9] = { 112, 104, 121, 115, 105, 99, 115 },
		[10] = { 101, 102, 102, 101, 99, 116, 115 },
		[11] = { 100, 101, 110, 115, 105, 116, 121 },
		[12] = { 99, 111, 114, 101 },
		[13] = { 114, 101, 115, 111, 117, 114, 99, 101 },
		[14] = { 78, 111, 114, 109, 97, 108 },
		[15] = { 69, 109, 101, 114, 103, 101, 110, 99, 121 },
		[16] = { 67, 111, 111, 108, 100, 111, 119, 110 },
		[17] = { 72, 101, 97, 114, 116, 98, 101, 97, 116 },
		[18] = { 87, 97, 105, 116 },
		[19] = { 71, 101, 116, 82, 101, 97, 108, 80, 104, 121, 115, 105, 99, 115, 70, 80, 83 },
		[20] = { 84, 111, 116, 97, 108 },
		[21] = { 86, 97, 108, 117, 101 },
		[22] = { 83, 73, 77, 95, 84, 72, 82, 69, 83, 72 },
		[23] = { 80, 65, 82, 84, 95, 84, 72, 82, 69, 83, 72 },
		[24] = { 70, 88, 95, 84, 72, 82, 69, 83, 72 },
		[25] = { 71, 101, 116, 68, 101, 115, 99, 101, 110, 100, 97, 110, 116, 115 },
		[26] = { 66, 97, 115, 101, 80, 97, 114, 116 },
		[27] = { 73, 115, 65 },
		[28] = { 80, 97, 114, 116, 105, 99, 108, 101, 69, 109, 105, 116, 116, 101, 114 },
		[29] = { 76, 105, 103, 104, 116 },
		[30] = { 72, 97, 115, 84, 97, 103 },
		[31] = { 77, 97, 110, 97, 103, 101, 100, 82, 101, 110, 100, 101, 114 },
		[32] = { 65, 100, 100, 84, 97, 103 },
		[33] = { 77, 97, 110, 97, 103, 101, 100, 69, 102, 102, 101, 99, 116 },
		[34] = { 77, 111, 100, 101, 108 },
		[35] = { 80, 114, 105, 109, 97, 114, 121, 80, 97, 114, 116 },
		[36] = { 77, 101, 115, 104, 80, 97, 114, 116 },
		[37] = { 77, 101, 115, 104, 73, 100 },
		[38] = { 44 },
		[39] = { 67, 108, 117, 116, 116, 101, 114 },
		[40] = { 99, 114, 101, 97, 116, 101 },
		[41] = { 114, 101, 115, 117, 109, 101 },
		[42] = { 99, 101, 108, 108 },
		[43] = { 100, 97, 116, 97 },
		[44] = { 76, 79, 68 },
		[45] = { 112 },
		[46] = { 109 },
		[47] = { 108, 102 },
		[48] = { 108, 116 },
		[49] = { 108, 118 },
		[50] = { 105, 115, 67 },
		[51] = { 68, 101, 99, 97, 108 },
		[52] = { 87, 111, 114, 108, 100, 84, 111, 86, 105, 101, 119, 112, 111, 114, 116, 80, 111, 105, 110, 116 },
		[53] = { 84, 114, 97, 110, 115, 112, 97, 114, 101, 110, 99, 121 },
		[54] = { 102, 114, 111, 109, 86, 97, 108, 117, 101 },
		[55] = { 82, 101, 110, 100, 101, 114, 70, 105, 100, 101, 108, 105, 116, 121 },
		[56] = { 111 },
		[57] = { 77, 97, 103, 110, 105, 116, 117, 100, 101, 83, 113, 114 },
		[58] = { 80, 111, 115, 105, 116, 105, 111, 110 },
		[59] = { 111, 82 },
		[60] = { 80, 104, 121, 115, 105, 99, 115 },
		[61] = { 65, 110, 99, 104, 111, 114, 101, 100 },
		[62] = { 65, 115, 115, 101, 109, 98, 108, 121, 76, 105, 110, 101, 97, 114, 86, 101, 108, 111, 99, 105, 116, 121 },
		[63] = { 77, 97, 103, 110, 105, 116, 117, 100, 101 },
		[64] = { 102, 120 },
		[65] = { 97, 110, 99, 104, 111, 114 },
		[66] = { 102, 105, 110, 100, 70, 105, 114, 115, 116, 65, 110, 99, 101, 115, 116, 111, 114, 87, 104, 105, 99, 104, 73, 115, 65 },
		[67] = { 82, 97, 116, 101 },
		[68] = { 66, 101, 97, 109 },
		[69] = { 84, 114, 97, 105, 108 },
		[70] = { 69, 110, 97, 98, 108, 101, 100 },
		[71] = { 105 },
		[72] = { 112, 80 },
		[73] = { 105, 115, 67 },
		[74] = { 100 },
		[75] = { 114, 98, 120 },
		[76] = { 85, 110, 108, 111, 97, 100, 65, 115, 115, 101, 116, 115 },
		[77] = { 83, 97, 118, 101, 100, 81, 117, 97, 108, 105, 116, 121, 76, 101, 118, 101, 108 },
		[78] = { 81, 117, 97, 108, 105, 116, 121, 76, 101, 118, 101, 108 },
		[79] = { 84, 101, 99, 104, 110, 111, 108, 111, 103, 121 },
		[80] = { 83, 104, 97, 100, 111, 119, 115 },
		[81] = { 77, 97, 110, 97, 103, 101, 100, 80, 104, 121, 115, 105, 99, 115 },
		[82] = { 71, 101, 116, 84, 97, 103, 103, 101, 100 },
		[83] = { 71, 101, 116, 73, 110, 115, 116, 97, 110, 99, 101, 65, 100, 100, 101, 100, 83, 105, 103, 110, 97, 108 },
		[84] = { 67, 111, 110, 110, 101, 99, 116 },
		[85] = { 68, 101, 115, 99, 101, 110, 100, 97, 110, 116, 65, 100, 100, 101, 100 },
		[86] = { 83, 111, 117, 110, 100 },
		[87] = { 83, 111, 117, 110, 100, 73, 100 },
		[88] = { 73, 109, 97, 103, 101, 76, 97, 98, 101, 108 },
		[89] = { 73, 109, 97, 103, 101, 66, 117, 116, 116, 111, 110 },
		[90] = { 84, 101, 120, 116, 117, 114, 101 },
		[91] = { 73, 109, 97, 103, 101 },
		[92] = { 102, 110 },
		[93] = { 97, 114, 103, 115 },
		[94] = { 99, 97, 116, 101, 103, 111, 114, 121 },
		[95] = { 105, 110, 116, 101, 114, 118, 97, 108 },
		[96] = { 110, 97, 109, 101 },
		[97] = { 79, 114, 99, 104, 101, 115, 116, 114, 97, 116, 111, 114 },
		[98] = { 77, 97, 105, 110, 85, 112, 100, 97, 116, 101 },
		[99] = { 67, 117, 108, 108, 101, 100, 67, 104, 101, 99, 107 },
		[100] = { 82, 101, 115, 111, 117, 114, 99, 101, 115 },
		[101] = { 102 },
		[102] = { 112 },
		[103] = { 109 },
		[104] = { 99 }
	};
	local _k = 17;
	local function _d(t) local r = {}; for i = 1, #t do r[i] = string.char(bit32.bxor(t[i], _k)) end return table.concat(r) end
	local s1, s2, s3, s4, s5, s6, s7 = game:GetService(_d(_s[1])), game:GetService(_d(_s[2])), game:GetService(_d(_s[3])), game:GetService(_d(_s[4])), game:GetService(_d(_s[5])), game:GetService(_d(_s[6])), UserSettings():GetService(_d(_s[7]));
	local v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11 = s3.CurrentCamera, os.clock, table.insert, table.remove, table.clone, math.floor, math.huge, math.exp, math.min, math.max, math.clamp;
	local p1, p2, p3, p4, p5, p6, p7, p8, p9 = ipairs, pairs, pcall, type, task.spawn, task.wait, task.delay, coroutine.create, coroutine.resume;
	_._M1 = { PROFS = { [1] = { [_d(_s[101])] = 120, [_d(_s[102])] = 60, [_d(_s[103])] = 2000 }, [2] = { [_d(_s[101])] = 60, [_d(_s[102])] = 55, [_d(_s[103])] = 1200 }, [3] = { [_d(_s[101])] = 40, [_d(_s[102])] = 35, [_d(_s[103])] = 800 }, [4] = { [_d(_s[101])] = 25, [_d(_s[102])] = 20, [_d(_s[103])] = 400 } }, aggr = { [_d(_s[8])] = 2, [_d(_s[9])] = 2, [_d(_s[10])] = 2, [_d(_s[11])] = 2, [_d(_s[12])] = 2, [_d(_s[13])] = 2 }, _avgFps = 60, _lastCheck = 0, _isCalibrated = false, _state = _d(_s[14]), _cdStart = 0, _potato = false, CD_DUR = 8, REC_DUR = 5, REC_FPS = 35, EMG_FPS = 25, };
	function _._M1:f1(s) if self._state == s then return end; self._state = s; if s == _d(_s[15]) then for k, _ in p2(self.aggr) do self.aggr[k] = 5 end; _._M11:f1(1); _._M8:f1(true) elseif s == _d(_s[16]) then self._cdStart = v2() elseif s == _d(_s[14]) then _._M8:f1(false); local sA, e, d = v5(self.aggr), 0, self.REC_DUR; p5(function() while e < d and self._state == _d(_s[14]) do local a = e / d; for k, v in p2(sA) do self.aggr[k] = v + (2 - v) * a end; e += s1[_d(_s[17])]:Wait() end; if self._state == _d(_s[14]) and not self._potato then _._M11:f2() end end) end end
	function _._M1:f2(dt) self._avgFps = v8(-dt * 2) * self._avgFps + (1 - v8(-dt * 2)) * (1 / dt); if not self._isCalibrated then return end; local s, af = self._state, self._avgFps; if s == _d(_s[14]) then if af < self.EMG_FPS then self:f1(_d(_s[15])) end elseif s == _d(_s[15]) then if af > self.REC_FPS then self:f1(_d(_s[16])) end elseif s == _d(_s[16]) then if af < self.EMG_FPS then self:f1(_d(_s[15])) elseif v2() - self._cdStart > self.CD_DUR then self:f1(_d(_s[14])) end end; if s ~= _d(_s[14]) then return end; local n = v2(); if n - self._lastCheck < 0.5 then return end; self._lastCheck = n; local p = self.PROFS[4]; if af > self.PROFS[2][_d(_s[101])] then p = self.PROFS[1] elseif af > self.PROFS[3][_d(_s[101])] then p = self.PROFS[2] else p = self.PROFS[3] end; local rs, ps, ms = af / p[_d(_s[101])], s3[_d(_s[19])]() / p[_d(_s[102])], p[_d(_s[103])] / s4[_d(_s[20])][_d(_s[21])]; local a = 1 - v8(-0.5 * 2); local nr, np, ne, nd, nc, nres = if rs < 0.9 then rs < 0.7 and 3 or 2 else 1, if ps < 0.9 then ps < 0.7 and 4 or 3 else 1, if rs < 1 or ms < 1 then rs < 0.8 or ms < 0.8 and 4 or 3 else 1, if rs < 0.9 then rs < 0.75 and 4 or 3 else 1, p == self.PROFS[4] and 3 or p == self.PROFS[3] and 2 or 1, if ms < 0.8 then 3 else 1; self.aggr[_d(_s[8])] = self.aggr[_d(_s[8])] + (nr - self.aggr[_d(_s[8])]) * a; self.aggr[_d(_s[9])] = self.aggr[_d(_s[9])] + (np - self.aggr[_d(_s[9])]) * a; self.aggr[_d(_s[10])] = self.aggr[_d(_s[10])] + (ne - self.aggr[_d(_s[10])]) * a; self.aggr[_d(_s[11])] = self.aggr[_d(_s[11])] + (nd - self.aggr[_d(_s[11])]) * a; self.aggr[_d(_s[12])] = self.aggr[_d(_s[12])] + (nc - self.aggr[_d(_s[12])]) * a; self.aggr[_d(_s[13])] = self.aggr[_d(_s[13])] + (nres - self.aggr[_d(_s[13])]) * a; if nc >= 3 and not self._potato then self._potato = true; _._M11:f1(1) elseif nc < 2 and self._potato and s == _d(_s[14]) then self._potato = false; _._M11:f2() end end
	_._M2 = { SIM_THRESH = 15, PART_THRESH = 50, FX_THRESH = 5 };
	function _._M2:f1() local s = {}; local function pr(m) local pC, eC = 0, 0; for _, d in p1(m[_d(_s[25])](m)) do if d[(_d(_s[27]))](d, _d(_s[26])) then pC += 1 elseif d[(_d(_s[27]))](d, _d(_s[28])) or d[(_d(_s[27]))](d, _d(_s[29])) then eC += 1 end end; if pC > self.PART_THRESH and not s2[_d(_s[30])](s2, m, _d(_s[31])) then s2[_d(_s[32])](s2, m, _d(_s[31])) end; if eC > self.FX_THRESH and not s2[_d(_s[30])](s2, m, _d(_s[33])) then s2[_d(_s[32])](s2, m, _d(_s[33])) end end; for _, i in p1(s3[_d(_s[25])](s3)) do if i[(_d(_s[27]))](i, _d(_s[34])) and i[_d(_s[35])] then pr(i) elseif i[(_d(_s[27]))](i, _d(_s[36])) then local k = i[_d(_s[37])]; if k ~= "" then s[k] = s[k] or { [_d(_s[104])] = 0, [_d(_s[71])] = {} }; s[k][_d(_s[104])] += 1; v3(s[k][_d(_s[71])], i) end end; if i.Parent == s3 then p6() end end; for _, d in p2(s) do if d[_d(_s[104])] > self.SIM_THRESH then for _, o in p1(d[_d(_s[71])]) do if not s2[_d(_s[30])](s2, o, _d(_s[39])) then s2[_d(_s[32])](s2, o, _d(_s[39])) end end end end end
	_._M3 = {};
	function _._M3:f1() p6(5); local d = 5; local s, st = {}, v2(); while v2() - st < d do v3(s, 1 / s1[_d(_s[17])]:Wait()) end; local sm = 0; for _, f in p1(s) do sm += f end; local af = sm / #s; local o = _._M1; o.PROFS[1][_d(_s[101])] = v10(60, af * 0.9); o.PROFS[2][_d(_s[101])] = v10(45, af * 0.7); o.PROFS[3][_d(_s[101])] = v10(30, af * 0.5); o._isCalibrated = true; end
	_._M4 = { _tasks = {} };
	function _._M4:f1(t) local c = p8(function() while true do p3(t[_d(_s[92])], t[_d(_s[93])] or {}) local a = _._M1.aggr[t[_d(_s[94])]] or 1; p6(t[_d(_s[95])] * a) end end); v3(self._tasks, c) end
	function _._M4:f2() for _, c in p1(self._tasks) do p9(c) end end
	_._M5 = { GRID_SIZE = 250, _grid = {}, _tracked = setmetatable({}, { __mode = "k" }) };
	function _._M5:f1(o, d) if not (o and o[(_d(_s[27]))](o, _d(_s[26]))) then return end; local s = self.GRID_SIZE; local k = v6(o.Position.X / s) .. _d(_s[38]) .. v6(o.Position.Y / s) .. _d(_s[38]) .. v6(o.Position.Z / s); self._grid[k] = self._grid[k] or {}; v3(self._grid[k], o); self._tracked[o] = { [_d(_s[42])] = k, [_d(_s[43])] = d } end
	function _._M5:f2(p, r) local res, s = {}, self.GRID_SIZE; local cR = v6(r / s) + 1; local cx, cy, cz = v6(p.X / s), v6(p.Y / s), v6(p.Z / s); for i = cx - cR, cx + cR do for j = cy - cR, cy + cR do for k = cz - cR, cz + cR do local c = self._grid[i .. _d(_s[38]) .. j .. _d(_s[38]) .. k]; if c then for _, o in p1(c) do v3(res, o) end end end end end; return res end
	_._M6 = { DIST_SQR = { [1] = { 120 ^ 2, 300 ^ 2, 600 ^ 2 }, [2] = { 80 ^ 2, 200 ^ 2, 450 ^ 2 }, [3] = { 50 ^ 2, 150 ^ 2, 300 ^ 2 }, [4] = { 40 ^ 2, 120 ^ 2, 250 ^ 2 }, [5] = { 30 ^ 2, 80 ^ 2, 150 ^ 2 } }, CULL_DELAY = 5, _culled = {} };
	function _._M6:f1(m) if not m[_d(_s[35])] then return end; local p = {}; for _, d in p1(m[_d(_s[25])](m)) do if d[(_d(_s[27]))](d, _d(_s[26])) or d[(_d(_s[27]))](d, _d(_s[51])) then v3(p, d) end end; _._M5:f1(m[_d(_s[35])], { [_d(_s[44])] = { [_d(_s[45])] = p, [_d(_s[46])] = m, [_d(_s[47])] = -1, [_d(_s[48])] = -1, [_d(_s[49])] = v2(), [_d(_s[50])] = false } }) end
	function _._M6:f2(cf) local a = v6(_._M1.aggr[_d(_s[8])] + 0.5); local l, cP = v11(a, 1, 5), cf.Position; local lSqr = self.DIST_SQR[l]; local nby = _._M5:f2(cP, 800); for _, pP in p1(nby) do local t = _._M5._tracked[pP]; if not (pP and pP.Parent and t and t[_d(_s[43])][_d(_s[44])] and not t[_d(_s[43])][_d(_s[44])][_d(_s[50])]) then continue end; local dSqr, ld = (pP[_d(_s[58])] - cP)[_d(_s[57])], t[_d(_s[43])][_d(_s[44])]; local _, iV = v1[_d(_s[52])](v1, pP[_d(_s[58])]); if iV then ld[_d(_s[49])] = v2() end; local nT, nF; if dSqr < lSqr[1] then nT, nF = 0, 2 elseif dSqr < lSqr[2] then nT, nF = 0.75, 1 else nT, nF = 1, 0 end; if ld[_d(_s[48])] ~= nT then for _, part in p1(ld[_d(_s[45])]) do if part[(_d(_s[27]))](part, _d(_s[26])) then part[_d(_s[53])] = nT end end; ld[_d(_s[48])] = nT end; if ld[_d(_s[47])] ~= nF then local rf = Enum[_d(_s[55])][_d(_s[54])](nF); for _, part in p1(ld[_d(_s[45])]) do if part[(_d(_s[27]))](part, _d(_s[26])) then part[_d(_s[55])] = rf end end; ld[_d(_s[47])] = nF end; if dSqr > lSqr[3] and (v2() - ld[_d(_s[49])] > self.CULL_DELAY) then ld[_d(_s[50])] = true; v3(self._culled, { [_d(_s[56])] = ld[_d(_s[46])], [_d(_s[45])] = ld[_d(_s[46])].Parent }); ld[_d(_s[46])].Parent = nil end end end
	function _._M6:f3(cP) for i = #self._culled, 1, -1 do local cE = self._culled[i]; local pP = cE[_d(_s[56])][_d(_s[35])]; if not pP then v4(self._culled, i) continue end; if (pP[_d(_s[58])] - cP)[_d(_s[63])] < 700 then local t = _._M5._tracked[pP]; if t and t[_d(_s[43])][_d(_s[44])] then t[_d(_s[43])][_d(_s[44])][_d(_s[50])] = false; t[_d(_s[43])][_d(_s[44])][_d(_s[49])] = v2() end; cE[_d(_s[56])].Parent = cE[_d(_s[45])]; v4(self._culled, i) end end end
	_._M7 = { DIST_SQR = { [1] = v7, [2] = 250 ^ 2, [3] = 150 ^ 2, [4] = 80 ^ 2, [5] = 40 ^ 2 }, SLEEP_VEL = 0.4 };
	function _._M7:f1(m) if not m[_d(_s[35])] then return end; local p = {}; for _, d in p1(m[_d(_s[25])](m)) do if d[(_d(_s[27]))](d, _d(_s[26])) and not d[_d(_s[61])] then v3(p, d) end end; if #p > 0 then _._M5:f1(m[_d(_s[35])], { [_d(_s[60])] = { [_d(_s[45])] = p } }) end end
	function _._M7:f2(cP) local a = v6(_._M1.aggr[_d(_s[9])] + 0.5); local l = v11(a, 1, 5); local dSqr = self.DIST_SQR[l]; local nby = _._M5:f2(cP, 500); for _, pP in p1(nby) do local t = _._M5._tracked[pP]; if not (pP and pP.Parent and t and t[_d(_s[43])][_d(_s[60])]) then continue end; local sA = (pP[_d(_s[58])] - cP)[_d(_s[57])] > dSqr or pP[_d(_s[62])][_d(_s[63])] < self.SLEEP_VEL; for _, p in p1(t[_d(_s[43])][_d(_s[60])][_d(_s[45])]) do if p and p[_d(_s[61])] ~= sA then p[_d(_s[61])] = sA end end end end
	_._M8 = { DIST_CULL = { [1] = 500, [2] = 300, [3] = 150, [4] = 80, [5] = 0 }, _effects = {}, REC_TIME = 4 };
	function _._M8:f1(i) local aP = i[(_d(_s[27]))](i, _d(_s[26])) and i or i[_d(_s[66])](i, _d(_s[34])) and i[_d(_s[66])](i, _d(_s[34]))[_d(_s[35])]; if not aP then return end; local function pE(e) local oR = e[(_d(_s[27]))](e, _d(_s[28])) and e[_d(_s[67])]; v3(self._effects, { [_d(_s[64])] = e, [_d(_s[65])] = aP, [_d(_s[59])] = oR }) end; if i[(_d(_s[27]))](i, _d(_s[28])) or i[(_d(_s[27]))](i, _d(_s[68])) or i[(_d(_s[27]))](i, _d(_s[69])) or i[(_d(_s[27]))](i, _d(_s[29])) then pE(i) else for _, d in p1(i[_d(_s[25])](i)) do if d[(_d(_s[27]))](d, _d(_s[28])) or d[(_d(_s[27]))](d, _d(_s[68])) or d[(_d(_s[27]))](d, _d(_s[69])) or d[(_d(_s[27]))](d, _d(_s[29])) then pE(d) end end end end
	function _._M8:f2(isE) p5(function() local e, d = 0, self.REC_TIME; local iR = {}; if not isE then for i, data in p1(self._effects) do if data[_d(_s[64])] and data[_d(_s[64])][(_d(_s[27]))](data[_d(_s[64])], _d(_s[28])) then iR[i] = data[_d(_s[64])][_d(_s[67])] end end end; while e < d do local a = e / d; for i, data in p1(self._effects) do local ef = data[_d(_s[64])]; if ef and ef.Parent and ef[(_d(_s[27]))](ef, _d(_s[28])) and data[_d(_s[59])] then if isE then ef[_d(_s[67])] = 0 else local sR = iR[i] or 0; ef[_d(_s[67])] = sR + (data[_d(_s[59])] - sR) * a end end end; if isE then break else e += s1[_d(_s[17])]:Wait() end end end) end
	function _._M8:f3(cf) local a = v6(_._M1.aggr[_d(_s[10])] + 0.5); local l = v11(a, 1, 5); local cD, cP = self.DIST_CULL[l], cf.Position; for _, d in p1(self._effects) do local e, aP = d[_d(_s[64])], d[_d(_s[65])]; if not (e and e.Parent and aP and aP.Parent) then continue end; local _, iV = v1[_d(_s[52])](v1, aP[_d(_s[58])]); local sE = iV and (aP[_d(_s[58])] - cP)[_d(_s[63])] < cD; if e[_d(_s[70])] ~= sE then e[_d(_s[70])] = sE end end end
	_._M9 = { CULL_PCNT = { [1] = 0, [2] = 0.25, [3] = 0.5, [4] = 0.75, [5] = 0.9 }, DIST_START = 150, _culled = {}, _clutter = {} };
	function _._M9:f1(i) local pP = i[(_d(_s[27]))](i, _d(_s[34])) and i[_d(_s[35])] or (i[(_d(_s[27]))](i, _d(_s[26])) and i); if pP then v3(self._clutter, { [_d(_s[71])] = i, [_d(_s[72])] = pP, [_d(_s[73])] = false }) end end
	function _._M9:f2(cP) local a = v6(_._M1.aggr[_d(_s[11])] + 0.5); local l = v11(a, 1, 5); local cPcnt = self.CULL_PCNT[l]; if cPcnt == 0 then self:f4() return end; local pTC = {}; for _, cD in p1(self._clutter) do if not cD[_d(_s[73])] and (cD[_d(_s[72])][_d(_s[58])] - cP)[_d(_s[63])] > self.DIST_START then v3(pTC, cD) end end; for i = 1, v6(#pTC * cPcnt) do local cD = pTC[i]; if not cD[_d(_s[73])] then cD[_d(_s[73])] = true; v3(self._culled, { [_d(_s[56])] = cD[_d(_s[71])], [_d(_s[45])] = cD[_d(_s[71])].Parent, [_d(_s[74])] = cD }); cD[_d(_s[71])].Parent = nil end end end
	function _._M9:f3(cP) for i = #self._culled, 1, -1 do local e = self._culled[i]; if (e[_d(_s[74])][_d(_s[72])][_d(_s[58])] - cP)[_d(_s[63])] < self.DIST_START * 0.9 then e[_d(_s[74])][_d(_s[73])] = false; e[_d(_s[56])].Parent = e[_d(_s[45])]; v4(self._culled, i) end end end
	function _._M9:f4() for i = #self._culled, 1, -1 do local e = self._culled[i]; e[_d(_s[74])][_d(_s[73])] = false; e[_d(_s[56])].Parent = e[_d(_s[45])]; v4(self._culled, i) end end
	_._M10 = { _assets = {}, UNLOAD_TIME = 120 };
	function _._M10:f1(id) if p4(id) == "string" and id:match(_d(_s[75])) then self._assets[id] = v2() end end
	function _._M10:f2() local tU, n = {}, v2(); local a = _._M1.aggr[_d(_s[13])]; for id, lU in p2(self._assets) do if n - lU > self.UNLOAD_TIME * a then v3(tU, id); self._assets[id] = nil end end; if #tU > 0 then s6[_d(_s[76])](s6, tU) end end
	_._M11 = {};
	function _._M11:f1(l) s7[_d(_s[77])] = Enum[_d(_s[77])][_d(_s[78])] .. l; s5[_d(_s[79])] = 0; s5[_d(_s[80])] = false; end
	function _._M11:f2() s7[_d(_s[77])] = 3; s5[_d(_s[79])] = 2; s5[_d(_s[80])] = true; end
	function _:Activate()
		p5(self._M3.f1); p5(self._M2.f1)
		local function pr(i) if not i then return end; if s2[_d(_s[30])](s2, i, _d(_s[31])) then self._M6:f1(i) end; if s2[_d(_s[30])](s2, i, _d(_s[81])) then self._M7:f1(i) end; if s2[_d(_s[30])](s2, i, _d(_s[33])) then self._M8:f1(i) end; if s2[_d(_s[30])](s2, i, _d(_s[39])) then self._M9:f1(i) end end
		local tags = { _d(_s[31]), _d(_s[81]), _d(_s[33]), _d(_s[39]) };
		for _, t in p1(tags) do for _, i in p1(s2[_d(_s[82])](s2, t)) do p5(pr, i) end; s2[_d(_s[83])](s2, t)[_d(_s[84])](s2[_d(_s[83])](s2, t), pr) end
		s3[_d(_s[85])]:Connect(function(d) if d[(_d(_s[27]))](d, _d(_s[86])) then self._M10:f1(d[_d(_s[87])]) elseif d[(_d(_s[27]))](d, _d(_s[88])) or d[(_d(_s[27]))](d, _d(_s[89])) or d[(_d(_s[27]))](d, _d(_s[90])) then self._M10:f1(d[_d(_s[91])]) end end)
		self._M4:f1({ [_d(_s[96])] = _d(_s[97]), [_d(_s[92])] = function() self._M1:f2(s1[_d(_s[17])]:Wait()) end, [_d(_s[95])] = 0, [_d(_s[94])] = _d(_s[12]) })
		local cf; self._M4:f1({ [_d(_s[96])] = _d(_s[98]), [_d(_s[92])] = function() cf = v1.CFrame; self._M6:f2(cf); self._M7:f2(cf.Position); self._M8:f3(cf); self._M9:f2(cf.Position) end, [_d(_s[95])] = 0.1, [_d(_s[94])] = _d(_s[12]) })
		self._M4:f1({ [_d(_s[96])] = _d(_s[99]), [_d(_s[92])] = function() local cP = v1.CFrame.Position; self._M6:f3(cP); self._M9:f3(cP) end, [_d(_s[95])] = 1, [_d(_s[94])] = _d(_s[8]) })
		self._M4:f1({ [_d(_s[96])] = _d(_s[100]), [_d(_s[92])] = function() self._M10:f2() end, [_d(_s[95])] = 15, [_d(_s[94])] = _d(_s[13]) })
		self._M4:f2()
	end
end
_:Activate()
