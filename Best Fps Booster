local Aetherius = {}
do
	local RS,CS,WS,ST,LI,CP,UGS=game:GetService("RunService"),game:GetService("CollectionService"),game:GetService("Workspace"),game:GetService("Stats"),game:GetService("Lighting"),game:GetService("ContentProvider"),UserSettings():GetService("UserGameSettings")
	local Cam,os_c,tbl_i,tbl_r,tbl_c,mf,mh,me,mm,mmax,mcl=WS.CurrentCamera,os.clock,table.insert,table.remove,table.clone,math.floor,math.huge,math.exp,math.min,math.max,math.clamp
	local ipairs,pairs,pcall,type,t_s,t_w,t_d,co_c,co_r=ipairs,pairs,pcall,type,task.spawn,task.wait,task.delay,coroutine.create,coroutine.resume

	Aetherius.Orch={
		PROFS={[1]={f=120,p=60,m=2000},[2]={f=60,p=55,m=1200},[3]={f=40,p=35,m=800},[4]={f=25,p=20,m=400}},
		aggr={render=2,physics=2,effects=2,density=2,core=2,resource=2},
		_avgFps=60,_lastCheck=0,_isCalibrated=false,_state="Normal",_cdStart=0,_potato=false,
		CD_DUR=8,REC_DUR=5,REC_FPS=35,EMG_FPS=25,
	}
	function Aetherius.Orch:SetState(s) if self._state==s then return end;self._state=s;if s=="Emergency"then for k,_ in pairs(self.aggr)do self.aggr[k]=5 end;Aetherius.CoreOpt:SetQuality(1);Aetherius.FxMgr:SetEmergency(true)elseif s=="Cooldown"then self._cdStart=os_c()elseif s=="Normal"then Aetherius.FxMgr:SetEmergency(false);local sA,e,d=tbl_c(self.aggr),0,self.REC_DUR;t_s(function()while e<d and self._state=="Normal"do local a=e/d;for k,v in pairs(sA)do self.aggr[k]=v+(2-v)*a end;e+=RS.Heartbeat:Wait()end;if self._state=="Normal"and not self._potato then Aetherius.CoreOpt:Restore()end end)end end
	function Aetherius.Orch:Update(dt)
		self._avgFps=me(-dt*2)*self._avgFps+(1-me(-dt*2))*(1/dt)
		if not self._isCalibrated then return end;local s,af=self._state,self._avgFps
		if s=="Normal"then if af<self.EMG_FPS then self:SetState("Emergency")end
		elseif s=="Emergency"then if af>self.REC_FPS then self:SetState("Cooldown")end
		elseif s=="Cooldown"then if af<self.EMG_FPS then self:SetState("Emergency")elseif os_c()-self._cdStart>self.CD_DUR then self:SetState("Normal")end end
		if s~="Normal"then return end
		local n=os_c();if n-self._lastCheck<0.5 then return end;self._lastCheck=n
		local p=self.PROFS[4];if af>self.PROFS[2].f then p=self.PROFS[1]elseif af>self.PROFS[3].f then p=self.PROFS[2]else p=self.PROFS[3]end
		local rs,ps,ms=af/p.f,WS:GetRealPhysicsFPS()/p.p,p.m/ST.Total.Value;local a=1-me(-0.5*2)
		local nr,np,ne,nd,nc,nres=if rs<0.9 then rs<0.7 and 3 or 2 else 1,if ps<0.9 then ps<0.7 and 4 or 3 else 1,if rs<1 or ms<1 then rs<0.8 or ms<0.8 and 4 or 3 else 1,if rs<0.9 then rs<0.75 and 4 or 3 else 1,p==self.PROFS[4] and 3 or p==self.PROFS[3] and 2 or 1,if ms<0.8 then 3 else 1
		self.aggr.render=self.aggr.render+(nr-self.aggr.render)*a;self.aggr.physics=self.aggr.physics+(np-self.aggr.physics)*a;self.aggr.effects=self.aggr.effects+(ne-self.aggr.effects)*a;self.aggr.density=self.aggr.density+(nd-self.aggr.density)*a;self.aggr.core=self.aggr.core+(nc-self.aggr.core)*a;self.aggr.resource=self.aggr.resource+(nres-self.aggr.resource)*a
		if nc>=3 and not self._potato then self._potato=true;Aetherius.CoreOpt:SetQuality(1)elseif nc<2 and self._potato and s=="Normal"then self._potato=false;Aetherius.CoreOpt:Restore()end
	end
	
	Aetherius.AutoTag={SIM_THRESH=15,PART_THRESH=50,FX_THRESH=5}
	function Aetherius.AutoTag:Run()
		local similar={};local function proc(m)local pC,eC=0,0;for _,d in ipairs(m:GetDescendants())do if d:IsA("BasePart")then pC+=1 elseif d:IsA("ParticleEmitter")or d:IsA("Light")then eC+=1 end end;if pC>self.PART_THRESH and not CS:HasTag(m,"ManagedRender")then CS:AddTag(m,"ManagedRender")end;if eC>self.FX_THRESH and not CS:HasTag(m,"ManagedEffect")then CS:AddTag(m,"ManagedEffect")end end
		for _,i in ipairs(WS:GetDescendants())do if i:IsA("Model")and i.PrimaryPart then proc(i)elseif i:IsA("MeshPart")then local k=i.MeshId;if k~=""then similar[k]=similar[k]or{c=0,i={}};similar[k].c+=1;tbl_i(similar[k].i,i)end end;if i.Parent==WS then t_w()end end
		for _,d in pairs(similar)do if d.c>self.SIM_THRESH then for _,o in ipairs(d.i)do if not CS:HasTag(o,"Clutter")then CS:AddTag(o,"Clutter")end end end end
	end

	Aetherius.Calib={}
	function Aetherius.Calib:Run()t_w(5);local d=5;local s,st={},os_c();while os_c()-st<d do tbl_i(s,1/RS.Heartbeat:Wait())end;local sm=0;for _,f in ipairs(s)do sm+=f end;local af=sm/#s;local o=Aetherius.Orch;o.PROFS[1].f=mmax(60,af*0.9);o.PROFS[2].f=mmax(45,af*0.7);o.PROFS[3].f=mmax(30,af*0.5);o._isCalibrated=true;end

	Aetherius.Sched={_tasks={}}
	function Aetherius.Sched:AddTask(t)local c=co_c(function()while true do pcall(t.fn,t.args or{})local a=Aetherius.Orch.aggr[t.category]or 1;t_w(t.interval*a)end end);tbl_i(self._tasks,c)end
	function Aetherius.Sched:Run()for _,c in ipairs(self._tasks)do co_r(c)end end

	Aetherius.Grid={GRID_SIZE=250,_grid={},_tracked=setmetatable({},{__mode="k"})}
	function Aetherius.Grid:Register(o,d)if not(o and o:IsA("BasePart"))then return end;local s=self.GRID_SIZE;local k=mf(o.Position.X/s)..","..mf(o.Position.Y/s)..","..mf(o.Position.Z/s);self._grid[k]=self._grid[k]or{};tbl_i(self._grid[k],o);self._tracked[o]={cell=k,data=d}end
	function Aetherius.Grid:GetNearby(p,r)local res,s={},self.GRID_SIZE;local cR=mf(r/s)+1;local cx,cy,cz=mf(p.X/s),mf(p.Y/s),mf(p.Z/s);for i=cx-cR,cx+cR do for j=cy-cR,cy+cR do for k=cz-cR,cz+cR do local c=self._grid[i..","..j..","..k];if c then for _,o in ipairs(c)do tbl_i(res,o)end end end end end;return res end

	Aetherius.LOD={DIST_SQR={[1]={120^2,300^2,600^2},[2]={80^2,200^2,450^2},[3]={50^2,150^2,300^2},[4]={40^2,120^2,250^2},[5]={30^2,80^2,150^2}},CULL_DELAY=5,_culled={}}
	function Aetherius.LOD:Register(m)if not m.PrimaryPart then return end;local p={};for _,d in ipairs(m:GetDescendants())do if d:IsA("BasePart")or d:IsA("Decal")then tbl_i(p,d)end end;Aetherius.Grid:Register(m.PrimaryPart,{LOD={p=p,m=m,lf=-1,lt=-1,lv=os_c(),isC=false}})end
	function Aetherius.LOD:Update(cf)local a=mf(Aetherius.Orch.aggr.render+0.5);local l,cP=mcl(a,1,5),cf.Position;local lSqr=self.DIST_SQR[l];local nearby=Aetherius.Grid:GetNearby(cP,800);for _,pP in ipairs(nearby)do local t=Aetherius.Grid._tracked[pP];if not(pP and pP.Parent and t and t.data.LOD and not t.data.LOD.isC)then continue end;local dSqr,ld=(pP.Position-cP).MagnitudeSqr,t.data.LOD;local _,iV=Cam:WorldToViewportPoint(pP.Position);if iV then ld.lv=os_c()end;local nT,nF;if dSqr<lSqr[1]then nT,nF=0,2 elseif dSqr<lSqr[2]then nT,nF=0.75,1 else nT,nF=1,0 end;if ld.lt~=nT then for _,part in ipairs(ld.p)do if part:IsA("BasePart")then part.Transparency=nT end end;ld.lt=nT end;if ld.lf~=nF then local rf=Enum.RenderFidelity.fromValue(nF);for _,part in ipairs(ld.p)do if part:IsA("BasePart")then part.RenderFidelity=rf end end;ld.lf=nF end;if dSqr>lSqr[3]and(os_c()-ld.lv>self.CULL_DELAY)then ld.isC=true;tbl_i(self._culled,{o=ld.m,p=ld.m.Parent});ld.m.Parent=nil end end end
	function Aetherius.LOD:CheckCulled(cP)for i=#self._culled,1,-1 do local cE=self._culled[i];local pP=cE.o.PrimaryPart;if not pP then tbl_r(self._culled,i)continue end;if(pP.Position-cP).Magnitude<700 then local t=Aetherius.Grid._tracked[pP];if t and t.data.LOD then t.data.LOD.isC=false;t.data.LOD.lv=os_c()end;cE.o.Parent=cE.p;tbl_r(self._culled,i)end end end

	Aetherius.Physics={DIST_SQR={[1]=mh,[2]=250^2,[3]=150^2,[4]=80^2,[5]=40^2},SLEEP_VEL=0.4}
	function Aetherius.Physics:Register(m)if not m.PrimaryPart then return end;local p={};for _,d in ipairs(m:GetDescendants())do if d:IsA("BasePart")and not d.Anchored then tbl_i(p,d)end end;if #p>0 then Aetherius.Grid:Register(m.PrimaryPart,{Physics={p=p}})end end
	function Aetherius.Physics:Update(cP)local a=mf(Aetherius.Orch.aggr.physics+0.5);local l=mcl(a,1,5);local dSqr=self.DIST_SQR[l];local nearby=Aetherius.Grid:GetNearby(cP,500);for _,pP in ipairs(nearby)do local t=Aetherius.Grid._tracked[pP];if not(pP and pP.Parent and t and t.data.Physics)then continue end;local sA=(pP.Position-cP).MagnitudeSqr>dSqr or pP.AssemblyLinearVelocity.Magnitude<self.SLEEP_VEL;for _,p in ipairs(t.data.Physics.p)do if p and p.Anchored~=sA then p.Anchored=sA end end end end
	
	Aetherius.FxMgr={DIST_CULL={[1]=500,[2]=300,[3]=150,[4]=80,[5]=0},_effects={},REC_TIME=4}
	function Aetherius.FxMgr:Register(i)local aP=i:IsA("BasePart")and i or i:FindFirstAncestorWhichIsA("Model")and i:FindFirstAncestorWhichIsA("Model").PrimaryPart;if not aP then return end;local function pE(e)local oR=e:IsA("ParticleEmitter")and e.Rate;tbl_i(self._effects,{fx=e,anchor=aP,oR=oR})end;if i:IsA("ParticleEmitter")or i:IsA("Beam")or i:IsA("Trail")or i:IsA("Light")then pE(i)else for _,d in ipairs(i:GetDescendants())do if d:IsA("ParticleEmitter")or d:IsA("Beam")or d:IsA("Trail")or d:IsA("Light")then pE(d)end end end end
	function Aetherius.FxMgr:SetEmergency(isE)t_s(function()local e,d=0,self.REC_TIME;local iR={};if not isE then for i,data in ipairs(self._effects)do if data.fx and data.fx:IsA("ParticleEmitter")then iR[i]=data.fx.Rate end end end;while e<d do local a=e/d;for i,data in ipairs(self._effects)do local ef=data.fx;if ef and ef.Parent and ef:IsA("ParticleEmitter")and data.oR then if isE then ef.Rate=0 else local sR=iR[i]or 0;ef.Rate=sR+(data.oR-sR)*a end end end;if isE then break else e+=RS.Heartbeat:Wait()end end end)end
	function Aetherius.FxMgr:Update(cf)local a=mf(Aetherius.Orch.aggr.effects+0.5);local l=mcl(a,1,5);local cD,cP=self.DIST_CULL[l],cf.Position;for _,d in ipairs(self._effects)do local e,aP=d.fx,d.anchor;if not(e and e.Parent and aP and aP.Parent)then continue end;local _,iV=Cam:WorldToViewportPoint(aP.Position);local sE=iV and(aP.Position-cP).Magnitude<cD;if e.Enabled~=sE then e.Enabled=sE end end end

	Aetherius.Density={CULL_PCNT={[1]=0,[2]=0.25,[3]=0.5,[4]=0.75,[5]=0.9},DIST_START=150,_culled={},_clutter={}}
	function Aetherius.Density:Register(i)local pP=i:IsA("Model")and i.PrimaryPart or(i:IsA("BasePart")and i);if pP then tbl_i(self._clutter,{i=i,pP=pP,isC=false})end end
	function Aetherius.Density:Update(cP)local a=mf(Aetherius.Orch.aggr.density+0.5);local l=mcl(a,1,5);local cPcnt=self.CULL_PCNT[l];if cPcnt==0 then self:RestoreAll()return end;local pTC={};for _,cD in ipairs(self._clutter)do if not cD.isC and(cD.pP.Position-cP).Magnitude>self.DIST_START then tbl_i(pTC,cD)end end;for i=1,mf(#pTC*cPcnt)do local cD=pTC[i];if not cD.isC then cD.isC=true;tbl_i(self._culled,{o=cD.i,p=cD.i.Parent,d=cD});cD.i.Parent=nil end end end
	function Aetherius.Density:CheckRestore(cP)for i=#self._culled,1,-1 do local e=self._culled[i];if(e.d.pP.Position-cP).Magnitude<self.DIST_START*0.9 then e.d.isC=false;e.o.Parent=e.p;tbl_r(self._culled,i)end end end
	function Aetherius.Density:RestoreAll()for i=#self._culled,1,-1 do local e=self._culled[i];e.d.isC=false;e.o.Parent=e.p;tbl_r(self._culled,i)end end

	Aetherius.ResSentinel={_assets={},UNLOAD_TIME=120}
	function Aetherius.ResSentinel:Track(id)if type(id)=="string"and id:match("^rbx")then self._assets[id]=os_c()end end
	function Aetherius.ResSentinel:Cleanup()local tU,n={},os_c();local a=Aetherius.Orch.aggr.resource;for id,lU in pairs(self._assets)do if n-lU>self.UNLOAD_TIME*a then tbl_i(tU,id);self._assets[id]=nil end end;if #tU>0 then CP:UnloadAssets(tU)end end
	Aetherius.CoreOpt={}
	function Aetherius.CoreOpt:SetQuality(l)UGS.SavedQualityLevel=Enum.SavedQualitySetting["QualityLevel"..l];LI.Technology=0;LI.Shadows=false;end
	function Aetherius.CoreOpt:Restore()UGS.SavedQualityLevel=3;LI.Technology=2;LI.Shadows=true;end

	function Aetherius:Activate()
		t_s(self.Calib.Run);t_s(self.AutoTag.Run)
		local function proc(i)if not i then return end;if CS:HasTag(i,"ManagedRender")then self.LOD:Register(i)end;if CS:HasTag(i,"ManagedPhysics")then self.Physics:Register(i)end;if CS:HasTag(i,"ManagedEffect")then self.FxMgr:Register(i)end;if CS:HasTag(i,"Clutter")then self.Density:Register(i)end end
		local tags={"ManagedRender","ManagedPhysics","ManagedEffect","Clutter"};for _,t in ipairs(tags)do for _,i in ipairs(CS:GetTagged(t))do t_s(proc,i)end;CS:GetInstanceAddedSignal(t):Connect(proc)end
		WS.DescendantAdded:Connect(function(d)if d:IsA("Sound")then self.ResSentinel:Track(d.SoundId)elseif d:IsA("ImageLabel")or d:IsA("ImageButton")or d:IsA("Texture")then self.ResSentinel:Track(d.Image)end end)
		self.Sched:AddTask({name="Orchestrator",fn=function()self.Orch:Update(RS.Heartbeat:Wait())end,interval=0,category="core"})
		local cf;self.Sched:AddTask({name="MainUpdate",fn=function()cf=Cam.CFrame;self.LOD:Update(cf);self.Physics:Update(cf.Position);self.FxMgr:Update(cf)self.Density:Update(cf.Position)end,interval=0.1,category="core"})
		self.Sched:AddTask({name="CulledCheck",fn=function()local cP=Cam.CFrame.Position;self.LOD:CheckCulled(cP);self.Density:CheckRestore(cP)end,interval=1,category="render"})
		self.Sched:AddTask({name="Resources",fn=function()self.ResSentinel:Cleanup()end,interval=15,category="resource"})
		self.Sched:Run()
	end
end
Aetherius:Activate()
